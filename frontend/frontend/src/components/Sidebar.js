import React, { useState } from 'react';
import '../css/Sidebar.css';

export default function Sidebar({ onCategorySelect, selectedCategory }) {
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);

  const legoCategories = [
    {
      id: 'bricks',
      name: '–ö—É–±–∏–∫–∏',
      icon: 'üß±',
      subcategories: [
        { id: '2x2', name: '2x2' },
        { id: '2x4', name: '2x4' },
        { id: '1x2', name: '1x2' },
        { id: '1x4', name: '1x4' },
        { id: '1x1', name: '1x1' }
      ]
    },
    {
      id: 'plates',
      name: '–ü–ª–∞—Å—Ç–∏–Ω—ã',
      icon: 'üìè',
      subcategories: [
        { id: 'plate-2x2', name: '–ü–ª–∞—Å—Ç–∏–Ω–∞ 2x2' },
        { id: 'plate-2x4', name: '–ü–ª–∞—Å—Ç–∏–Ω–∞ 2x4' },
        { id: 'plate-1x2', name: '–ü–ª–∞—Å—Ç–∏–Ω–∞ 1x2' },
        { id: 'plate-1x4', name: '–ü–ª–∞—Å—Ç–∏–Ω–∞ 1x4' }
      ]
    },
    {
      id: 'axles',
      name: '–û—Å–∏',
      icon: '‚öôÔ∏è',
      subcategories: [
        { id: 'axle-2', name: '–û—Å—å 2' },
        { id: 'axle-3', name: '–û—Å—å 3' },
        { id: 'axle-4', name: '–û—Å—å 4' },
        { id: 'axle-6', name: '–û—Å—å 6' },
        { id: 'axle-8', name: '–û—Å—å 8' }
      ]
    },
    {
      id: 'gears',
      name: '–®–µ—Å—Ç–µ—Ä–Ω–∏',
      icon: '‚öôÔ∏è',
      subcategories: [
        { id: 'gear-8', name: '–®–µ—Å—Ç–µ—Ä–Ω—è 8 –∑—É–±—å–µ–≤' },
        { id: 'gear-16', name: '–®–µ—Å—Ç–µ—Ä–Ω—è 16 –∑—É–±—å–µ–≤' },
        { id: 'gear-24', name: '–®–µ—Å—Ç–µ—Ä–Ω—è 24 –∑—É–±–∞' },
        { id: 'gear-40', name: '–®–µ—Å—Ç–µ—Ä–Ω—è 40 –∑—É–±—å–µ–≤' }
      ]
    },
    {
      id: 'wheels',
      name: '–ö–æ–ª–µ—Å–∞',
      icon: 'üõû',
      subcategories: [
        { id: 'wheel-small', name: '–ú–∞–ª–µ–Ω—å–∫–æ–µ –∫–æ–ª–µ—Å–æ' },
        { id: 'wheel-medium', name: '–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–µ—Å–æ' },
        { id: 'wheel-large', name: '–ë–æ–ª—å—à–æ–µ –∫–æ–ª–µ—Å–æ' },
        { id: 'wheel-thin', name: '–¢–æ–Ω–∫–æ–µ –∫–æ–ª–µ—Å–æ' }
      ]
    },
    {
      id: 'connectors',
      name: '–°–æ–µ–¥–∏–Ω–∏—Ç–µ–ª–∏',
      icon: 'üîó',
      subcategories: [
        { id: 'connector-1', name: '–°–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å 1' },
        { id: 'connector-2', name: '–°–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å 2' },
        { id: 'connector-3', name: '–°–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å 3' },
        { id: 'connector-4', name: '–°–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å 4' }
      ]
    },
    {
      id: 'special',
      name: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ',
      icon: '‚≠ê',
      subcategories: [
        { id: 'hinge', name: '–ü–µ—Ç–ª—è' },
        { id: 'bracket', name: '–ö—Ä–æ–Ω—à—Ç–µ–π–Ω' },
        { id: 'beam', name: '–ë–∞–ª–∫–∞' },
        { id: 'angle', name: '–£–≥–æ–ª–æ–∫' }
      ]
    }
  ];

  const handleCategoryClick = (categoryId) => {
    onCategorySelect(categoryId);
  };

  const handleSubcategoryClick = (categoryId, subcategoryId) => {
    onCategorySelect(`${categoryId}-${subcategoryId}`);
  };

  return (
    <>
      {/* –ú–æ–±–∏–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é */}
      <div className="mobile-menu-toggle d-md-none">
        <button 
          className="btn btn-primary"
          onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
        >
          ‚ò∞ –ú–µ–Ω—é LEGO
        </button>
      </div>
      
      <div className={`sidebar ${isCollapsed ? 'collapsed' : ''} ${isMobileMenuOpen ? 'show' : ''}`}>
        <div className="sidebar-header">
          <h5 className="sidebar-title">
            {!isCollapsed && <span>–î–µ—Ç–∞–ª–∏ LEGO</span>}
          </h5>
          <button 
            className="sidebar-toggle"
            onClick={() => setIsCollapsed(!isCollapsed)}
          >
            {isCollapsed ? '‚Üí' : '‚Üê'}
          </button>
        </div>
      
      <div className="sidebar-content">
        {legoCategories.map((category) => (
          <div key={category.id} className="category-item">
            <div 
              className={`category-header ${selectedCategory === category.id ? 'active' : ''}`}
              onClick={() => handleCategoryClick(category.id)}
            >
              <span className="category-icon">{category.icon}</span>
              {!isCollapsed && <span className="category-name">{category.name}</span>}
            </div>
            
            {!isCollapsed && selectedCategory === category.id && (
              <div className="subcategories">
                {category.subcategories.map((subcategory) => (
                  <div 
                    key={subcategory.id}
                    className="subcategory-item"
                    onClick={() => handleSubcategoryClick(category.id, subcategory.id)}
                  >
                    {subcategory.name}
                  </div>
                ))}
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
    </>
  );
} 