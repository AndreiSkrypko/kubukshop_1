# =====================================================
# 📦 УСТАНОВКА BACKEND-ПРОЕКТА НА DJANGO + DRF + CORS
# =====================================================

# 1. Создаём папку под backend и переходим в неё
mkdir backend
cd backend

# 2. Создаём виртуальное окружжение
python -m venv venv

# 3. Активируем виртуальное окружение
# Для Windows:
venv\Scripts\activate
# Для Linux/macOS:
# source venv/bin/activate

# 4. Обновляем pip
python -m pip install --upgrade pip

# 5. Устанавливаем основные библиотеки
pip install django djangorestframework django-cors-headers

# 6. Создаём Django-проект в текущей папке
django-admin startproject backend .


# =====================================================
# 📦 УСТАНОВКА ДОПОЛНИТЕЛЬНЫХ БИБЛИОТЕК
# =====================================================

pip install python-decouple Pillow django-filter drf-spectacular djangorestframework-simplejwt


# =====================================================
# 📄 СОЗДАНИЕ ФАЙЛА requirements.txt
# =====================================================

# Сохраняем список всех установленных библиотек
pip freeze > requirements.txt

# Позже можно установить их на сервере:
# pip install -r requirements.txt


# =====================================================
# 🔧 НАСТРОЙКА GIT-РЕПОЗИТОРИЯ
# =====================================================

cd ..

git init

# Создаём файл .gitignore
cat > .gitignore <<EOL
venv/
__pycache__/
*.pyc
*.pyo
*.log
db.sqlite3
.env
node_modules/
build/
dist/
.vscode/
.idea/
.DS_Store
*.bak
EOL

# Привязываем к удалённому репозиторию и пушим
git remote add origin https://github.com/username/kubikshop.git
git add .
git commit -m "Первый коммит: Django + React проект"
git branch -M master
git push -u origin master


# =====================================================
# 🧱 СОЗДАНИЕ ПРИЛОЖЕНИЯ products
# =====================================================

cd backend  # если на шаге выше вышли из папки проекта
python manage.py startapp products


# =====================================================
# ⚙️ НАСТРОЙКА settings.py
# =====================================================

# 1. Добавьте в INSTALLED_APPS:
INSTALLED_APPS = [
    ...
    'rest_framework',
    'corsheaders',
    'products',
    'django_filters',
    'drf_spectacular',
]

# 2. Добавьте middleware:
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    ...
]

# 3. Разрешите CORS (доступ с фронтенда):
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
]

# 4. Настройки REST Framework:
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}


# =====================================================
# 🌐 НАСТРОЙКА МАРШРУТОВ (urls.py проекта)
# =====================================================

# Открой файл backend/urls.py и замените содержимое на следующее:

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('products.urls')),  # Добавляем маршруты из приложения products
]


# =====================================================
# 🎨 СОЗДАНИЕ FRONTEND-ПРОЕКТА НА REACT
# =====================================================

# 1. Переходим в корень проекта (если находимся в папке backend)
cd ..
mkdir frontend
cd frontend


# 2. Создаём frontend-папку с помощью Create React App
npx create-react-app frontend

# 3. Переходим в frontend
cd frontend

# 4. Устанавливаем библиотеки для работы с API и авторизацией
npm install axios react-router-dom jwt-decode

# (опционально — для работы с TailwindCSS)
# npm install -D tailwindcss postcss autoprefixer
# npx tailwindcss init -p
# затем настрой файл tailwind.config.js и index.css

# 5. Запускаем фронтенд
npm start

# React-приложение будет доступно на http://localhost:3000
