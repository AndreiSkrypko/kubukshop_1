import React, { useState, useEffect } from 'react';
import '../css/LegoProducts.css';

export default function LegoProducts({ selectedCategory }) {
  const [products, setProducts] = useState([]);
  const [filteredProducts, setFilteredProducts] = useState([]);
  const [loading, setLoading] = useState(true);

  // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ LEGO
  const mockProducts = [
    {
      id: 1,
      name: '–ö—É–±–∏–∫ LEGO 2x2',
      category: 'bricks',
      subcategory: '2x2',
      price: 15,
      image: 'üß±',
      description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∫—É–±–∏–∫ LEGO —Ä–∞–∑–º–µ—Ä–æ–º 2x2',
      inStock: true,
      colors: ['–ö—Ä–∞—Å–Ω—ã–π', '–°–∏–Ω–∏–π', '–ñ–µ–ª—Ç—ã–π', '–ó–µ–ª–µ–Ω—ã–π']
    },
    {
      id: 2,
      name: '–ö—É–±–∏–∫ LEGO 2x4',
      category: 'bricks',
      subcategory: '2x4',
      price: 25,
      image: 'üß±',
      description: '–ö—É–±–∏–∫ LEGO —Ä–∞–∑–º–µ—Ä–æ–º 2x4 –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞',
      inStock: true,
      colors: ['–ö—Ä–∞—Å–Ω—ã–π', '–°–∏–Ω–∏–π', '–ñ–µ–ª—Ç—ã–π', '–ó–µ–ª–µ–Ω—ã–π', '–ë–µ–ª—ã–π']
    },
    {
      id: 3,
      name: '–û—Å—å LEGO 2',
      category: 'axles',
      subcategory: 'axle-2',
      price: 8,
      image: '‚öôÔ∏è',
      description: '–û—Å—å LEGO –¥–ª–∏–Ω–æ–π 2 –µ–¥–∏–Ω–∏—Ü—ã',
      inStock: true,
      colors: ['–ß–µ—Ä–Ω—ã–π', '–°–µ—Ä—ã–π']
    },
    {
      id: 4,
      name: '–û—Å—å LEGO 4',
      category: 'axles',
      subcategory: 'axle-4',
      price: 12,
      image: '‚öôÔ∏è',
      description: '–û—Å—å LEGO –¥–ª–∏–Ω–æ–π 4 –µ–¥–∏–Ω–∏—Ü—ã',
      inStock: true,
      colors: ['–ß–µ—Ä–Ω—ã–π', '–°–µ—Ä—ã–π', '–ë–µ–ª—ã–π']
    },
    {
      id: 5,
      name: '–ü–ª–∞—Å—Ç–∏–Ω–∞ LEGO 2x2',
      category: 'plates',
      subcategory: 'plate-2x2',
      price: 10,
      image: 'üìè',
      description: '–¢–æ–Ω–∫–∞—è –ø–ª–∞—Å—Ç–∏–Ω–∞ LEGO 2x2',
      inStock: true,
      colors: ['–ö—Ä–∞—Å–Ω—ã–π', '–°–∏–Ω–∏–π', '–ñ–µ–ª—Ç—ã–π', '–ó–µ–ª–µ–Ω—ã–π', '–ë–µ–ª—ã–π']
    },
    {
      id: 6,
      name: '–®–µ—Å—Ç–µ—Ä–Ω—è LEGO 8 –∑—É–±—å–µ–≤',
      category: 'gears',
      subcategory: 'gear-8',
      price: 18,
      image: '‚öôÔ∏è',
      description: '–®–µ—Å—Ç–µ—Ä–Ω—è —Å 8 –∑—É–±—å—è–º–∏ –¥–ª—è –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤',
      inStock: true,
      colors: ['–ß–µ—Ä–Ω—ã–π', '–°–µ—Ä—ã–π', '–ë–µ–ª—ã–π']
    },
    {
      id: 7,
      name: '–ö–æ–ª–µ—Å–æ LEGO –º–∞–ª–µ–Ω—å–∫–æ–µ',
      category: 'wheels',
      subcategory: 'wheel-small',
      price: 20,
      image: 'üõû',
      description: '–ú–∞–ª–µ–Ω—å–∫–æ–µ –∫–æ–ª–µ—Å–æ –¥–ª—è –º–æ–¥–µ–ª–µ–π',
      inStock: true,
      colors: ['–ß–µ—Ä–Ω—ã–π', '–°–µ—Ä—ã–π']
    },
    {
      id: 8,
      name: '–°–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å LEGO 1',
      category: 'connectors',
      subcategory: 'connector-1',
      price: 6,
      image: 'üîó',
      description: '–°–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç',
      inStock: true,
      colors: ['–ß–µ—Ä–Ω—ã–π', '–°–µ—Ä—ã–π', '–ë–µ–ª—ã–π']
    },
    {
      id: 9,
      name: '–ü–µ—Ç–ª—è LEGO',
      category: 'special',
      subcategory: 'hinge',
      price: 15,
      image: '‚≠ê',
      description: '–ü–µ—Ç–ª—è –¥–ª—è –ø–æ–¥–≤–∏–∂–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π',
      inStock: true,
      colors: ['–ß–µ—Ä–Ω—ã–π', '–°–µ—Ä—ã–π']
    },
    {
      id: 10,
      name: '–ö—Ä–æ–Ω—à—Ç–µ–π–Ω LEGO',
      category: 'special',
      subcategory: 'bracket',
      price: 22,
      image: '‚≠ê',
      description: '–ö—Ä–æ–Ω—à—Ç–µ–π–Ω –¥–ª—è –∫—Ä–µ–ø–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
      inStock: true,
      colors: ['–ß–µ—Ä–Ω—ã–π', '–°–µ—Ä—ã–π', '–ë–µ–ª—ã–π']
    }
  ];

  useEffect(() => {
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    setTimeout(() => {
      setProducts(mockProducts);
      setLoading(false);
    }, 1000);
  }, []);

  useEffect(() => {
    if (selectedCategory) {
      const [category, subcategory] = selectedCategory.split('-');
      let filtered = products;
      
      if (subcategory) {
        filtered = products.filter(product => 
          product.category === category && product.subcategory === subcategory
        );
      } else {
        filtered = products.filter(product => product.category === category);
      }
      
      setFilteredProducts(filtered);
    } else {
      setFilteredProducts(products);
    }
  }, [selectedCategory, products]);

  const handleAddToCart = (product) => {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    console.log('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É:', product.name);
    alert(`–¢–æ–≤–∞—Ä "${product.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!`);
  };

  if (loading) {
    return (
      <div className="products-loading">
        <div className="spinner-border text-primary" role="status">
          <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
        </div>
        <p>–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã...</p>
      </div>
    );
  }

  return (
    <div className="lego-products">
      <div className="products-header">
        <h2>
          {selectedCategory ? 
            `–î–µ—Ç–∞–ª–∏ LEGO - ${selectedCategory.replace('-', ' ')}` : 
            '–í—Å–µ –¥–µ—Ç–∞–ª–∏ LEGO'
          }
        </h2>
        <p className="products-count">
          –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {filteredProducts.length}
        </p>
      </div>

      {filteredProducts.length === 0 ? (
        <div className="no-products">
          <div className="no-products-icon">üîç</div>
          <h3>–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
        </div>
      ) : (
        <div className="products-grid">
          {filteredProducts.map((product) => (
            <div key={product.id} className="product-card">
              <div className="product-image">
                <span className="product-icon">{product.image}</span>
              </div>
              <div className="product-info">
                <h4 className="product-name">{product.name}</h4>
                <p className="product-description">{product.description}</p>
                <div className="product-colors">
                  <strong>–¶–≤–µ—Ç–∞:</strong> {product.colors.join(', ')}
                </div>
                <div className="product-price">
                  <span className="price">{product.price} ‚ÇΩ</span>
                  <span className={`stock-status ${product.inStock ? 'in-stock' : 'out-of-stock'}`}>
                    {product.inStock ? '–í –Ω–∞–ª–∏—á–∏–∏' : '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}
                  </span>
                </div>
                <button 
                  className="btn btn-primary add-to-cart-btn"
                  onClick={() => handleAddToCart(product)}
                  disabled={!product.inStock}
                >
                  {product.inStock ? '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É' : '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}
                </button>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
} 